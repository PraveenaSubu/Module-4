               Pastiebin link
  https://www.pastiebin.com/634e34a74cb16
   
   Notes:
   
  //Advance Javascript

//Sequential Execution:
//Synchronous  Execution:

console.log("first.....");
console.log("second.....");
console.log("third....");

//ex 02:
console.log("first......");
function foo(){
    console.log("function is calling...");
}
console.log("secondd......");
foo();
//Asynchronous function
//Settimeout is a inbuilt async function
//parameters:function as well as time in milli seconds
//it will make the code to wait after a specific time
//after that it will be executed 
console.log("app is downloading......");
setTimeout(()=>{
console.log("this is a blocking code....");
},3000);

setTimeout(()=>{
    console.log("this is a blocking code1....");
    },3000);
console.log("app downloaded......");
console.log("app downloaded......");
console.log("app downloaded......");
console.log("app downloaded......");
console.log("app downloaded......");
console.log("hello");

setInterval(()=>{
    console.log("hello guvi!!!!");
},1000);
console.log("executed");

//setInterval
// after a specific duration it will be repetative

//call stack: it is a register which keeps the track of the functions
//that are to be executed






var res=()=>{
    bar();
    console.log("hello");
    
}

var bar=()=>{
    console.log("guvi");
}

res();

// res();

// function res(){
//     bar();
//     console.log("hello");
// }
// function bar(){
//     console.log("guvi");
// }

//call stack: it is a register which keeps the track of the functions
//that are to be executed


//Web API: it is a place where the actual time consuming operations
//has been executed 

//Call back Queue: FIFO
//it is a place where the functions  that has to be 
//executed by the call stack will be placed


console.log("App is started")
setTimeout(function timer() {
        console.log('app is under  development');    
    }, 5000);


console.log("app  is under testing");

setTimeout(function timeout() {
    console.log("app is deployed");
}, 1000);

console.log("app completes");


//EventLoop: it checkes whether the call stack is empty or not
//if it is empty it will be pushed to the call stack to executed the function
//call back: a function which takes one more function as a parameter
//the function which is used a parameter is nothing but called as callback function

//the one which is sent as a parameter is nothig but called as call back function

function foo(res){
    //var result=bar;
    //var result=hello world
    var result=res;
     console.log(result);
    console.log("this is a foo function");
}

function bar(){
  return "hello world";
}

foo(bar());

<script src="https://app.zenclass.in/sheets/v1/js/zen/suite/bundle.js"></script>


//call back hell

function f1(){
   function f2(){
    function f3(){
      function f4(){
        function f5(){
          console.log("hello world!!!!");
        }
      }
    }
   }
}


f1();
To overcome the call back hell scenario we will be using  the promises//to overcome call  back hell scenario we use promises
//Promise:it is an Object which holds the result of asynchronous operations
//Purpose is:it holds  asynchronous operation result that can be returned 
//synchrnously
//syntax: var variablename=new Promise(()=>{});
// var p1=new Promise((resolve,reject)=>);
//promise takes a function as a parameter
//inside that function we have resolve as well as reject as a parameters//to overcome call  back hell scenario we use promises
//Promise:it is an Object which holds the result of asynchronous operations
//Purpose is:it holds  asynchronous operation result that can be returned 
//synchrnously
//syntax: var variablename=new Promise(()=>{});
// var p1=new Promise((resolve,reject)=>);
//promise takes a function as a parameter
//inside that function we have resolve as well as reject as a parameters
var p1=new Promise((resolve,reject)=>{
  reject("this is rejected");
  resolve("this is resolved");
});
console.log(p1);
//Ex01:reading the marks of student
//reading the marks is an asynchronous ops
var marks=parseInt(prompt("Enter the marks of student!!"));
var p1=new Promise((resolve,reject)=>{
 if(marks>=35){
  resolve("you have passed!!!!");
 } 
else{
  reject("you have failed!!!!");
}

});

console.log(p1);

var marks=parseInt(prompt("Enter the marks of student!!"));
var p1=new Promise((resolve,reject)=>{
 if(marks>=35){
  resolve("you have passed!!!!");
 } 
else{
  reject("you have failed!!!!");
}

});
p1.then((data)=>console.log(data)).catch((error)=>console.log(error));
//to handle the promises/accessing the data
//.then method: 
//it is applicable for fullfilled state
//it helps us to extract the value of fullfilled
//it takes the call back function as a parameters
//to print the result

//.catch method:
//it is applicable for rejected state
//it helps us to extract the value of rejected
//it takes the call back function as a parameters
//to print the result

//error and data are userdefined

function foo(){
  return new Promise((resolve,reject)=>resolve(2*3));
}
var res=foo();
console.log(res);
foo().then((data)=>console.log(data)).catch((error)=>console.log(error));
//if a  function is returning a promise
//it has to be handled by .then for successfull...
//it has to be handled by .catch for rejected...
function mul(number){
return new Promise((resolve,reject)=>setTimeout(()=>{
  resolve(2*number)
},3000));
}
mul(12)
.then((data)=>{
  console.log(data);
  //mul(24);
  return mul(data);
}).then((data1)=>{
  console.log(data1);
  //mul(48);
  return mul(data1);
})
.then((data2)=>console.log(data2)).catch((error)=>console.log(error));


//if rejected in between

function mul(number){
return new Promise((resolve,reject)=>setTimeout(()=>{
  resolve(2*number)
},3000));
}

function bar(number){
  return new Promise((resolve,reject)=>setTimeout(()=>{
    reject(2*number+"this is rejected state")
  },3000));
  }

mul(12)
.then((data)=>{
  console.log(data);
  //mul(24);
  return mul(data);
}).then((data1)=>{
  console.log(data1);
  //bar(48);
  return bar(data1);
})
.then((data2)=>console.log(data2))
.catch((error)=>console.log(error));

//multiple promises
var p1= new Promise((resolve,reject)=>{
if(true){
  setTimeout(()=>{
    resolve("Promise 1 is resolved ");
  },3000);
}
else{
  setTimeout(()=>{
    reject("promise 1 is rejected");
  },1500)
}
});
var p2= new Promise((resolve,reject)=>{
  if(false){
    setTimeout(()=>{
      resolve("Promise 2 is resolved ");
    },2000);
  }
  else{
    setTimeout(()=>{
      reject("promise 2 is rejected");
    },4000);
  }
  });
  var p3= new Promise((resolve,reject)=>{
    if(false){
      setTimeout(()=>{
        resolve("Promise 3 is resolved ");
      },1000);
    }
    else{
      setTimeout(()=>{
        reject("promise 3 is rejected");
      },2000);
    }
    });
//executing the promise at a timeeeee...
//promise.all
//promise.all takes the array of promises as an input
//it will wait untill all the executions are completed
//it returns the results of promises in an array
Promise.all([p2,p1,p3]).then((data)=>console.log(data)).catch((error)=>console.log(error));
//promise.all : if one promise getting rejected..then rest of the promises are ignored

//to overcome the drawback we will be using the 

//promise.allSettled
//promise.all takes the array of promises as an input
//it will show all the promises as such whether it has been resolved or rejected
//The ouput will be an array of Objects
Promise.allSettled([p1,p2,p3]).then((data)=>data.forEach((ele)=>console.log(ele)));
//XHR has the draw back
//To ovecome the XHR process we use the fetch 

//fetch is an alternative to the XHR
//Syntax:fetch("api url")
//fetch takes api url as a parameter
//it returns the promise object
var res=fetch("https://restcountries.com/v2/all")
.then((data)=>data.json()).then((data1)=>console.log(data1)).catch((error)=>console.log(error));

//the data coming from the fetch is of promise
//inside the promise object we have results in readable streams
//to convert the readable streams into objects
//we need .json() method.

//.json method is returning again the promise,
//to handle this promise.use one more .then()

//Assignement 01:
//Use the Below API to fetch the results of all the countrynames in console
https://raw.githubusercontent.com/rvsp/restcountries-json-data/master/res-countries.json

var container=document.createElement("div");
container.setAttribute("class","container");
var row=document.createElement("div");
row.setAttribute("class","row");
row.classList.add("row","m-3");
container.append(row);

var res=fetch("https://restcountries.com/v2/all");
res.then((data)=>data.json()).then((data1)=>foo(data1));


function foo(data1){
for(var i=0;i<data1.length;i++){
   row.innerHTML+=`<div class="col-md-4">
 <div class="card text-white bg-primary mb-3" style="max-width: 18rem;">
  <img src="${data1[i].flag}" class="card-img-top" alt="...">
  <div class="card-body">
  <h5 class="card-title">${data1[i].name}</h5>
  <h5 class="card-title">${data1[i].capital}</h5>
  </div>
</div>
  
   </div>`;
document.body.append(container); 
}

}

//Fetch consist of the multiple .then 
//easier way of writing 

//Async and Await
//it is a easier/syntactic sugar of writing the promises
//it is applicable to the functions

//normal function to async
//An async function always returns the promise
//Await: instead of .then 
//it is a keyword inside the async function
//it is used inside the async function

async function bar(){
let res= await fetch("https://restcountries.com/v2/all");
let result=await res.json();
console.log(result);
}
bar();

//1.Assignment
//Print the total cases of TN state 
//consisiting of Deaths,recovered,Active
API:https://data.covid19india.org/v4/min/data.min.json
async function bar(){
let res= await fetch("https://data.covid19india.org/v4/min/data.min.json");
let result=await res.json();
console.log(`Confirmed:${result.TN.total.confirmed}`);
}
bar();

//try-catch
//try-catch: is a error handler statement in async and await
//try-:testing block
//catch:error handler

function bar(){
    return new Promise((resolve,reject)=>reject("this is rejected"));
}//try-catch
//try-catch: is a error handler statement in async and await
//try-:testing block
//catch:error handler

function see(){
    return new Promise((resolve,reject)=>resolve("this is resolved"));
}
async function foo(){
    try {

        let res1 =await see();
        let res= await bar();
        console.log(res1);
        console.log(res);
    } catch (error) {
        console.log(error);
    }
}

foo();


//Multiple api with async and await
//restcountires as well as the openweathermap
async function restdata(){
let res=await fetch("https://raw.githubusercontent.com/rvsp/restcountries-json-data/master/res-countries.json");
let res1= await res.json();
console.log(res1);
// console.log(res1[0].name);
// console.log(res1[0].latlng);
try {
    for(var i=0;i<res1.length;i++){
    var name=res1[i].name;
    var latlong=res1[i].latlng;
    if(latlong.length===undefined){
        throw new Error("invalid coordinates");
    }
    opendata(name,...latlong);
    }
} catch (error) {
    console.log("invalid"+error.message);
}
}
//lat:33
//lon:65
async function opendata(name,lat,lon){
try {
let res=await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=b9d07e8d66a7c9c78d47685619746207`);
let res1= await res.json();
console.log(`Country name:${name} , Temp:${res1.main.temp}`);
} catch (error) {
    console.log(error.message);
}
}


restdata();
               
               Loupe link
  http://latentflip.com/loupe/
  
  $.on('button', 'click', function onClick() {
    setTimeout(function timer() {
        console.log('You clicked the button!');    
    }, 2000);
});

console.log("Hi!");

setTimeout(function timeout() {
    console.log("Click the button!");
}, 5000);

console.log("Welcome to loupe.");

             link

<script src="https://app.zenclass.in/sheets/v1/js/zen/suite/bundle.js"></script>

                 Javasript link
                 
 https://developer.mozilla.org/en-US/docs/Web/JavaScript  
 
 https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault
 
 
